# ###########################################################################
# 
# Name       : prime.sasm
# Author     : Gerard Wassink
# Date       : june 2019
# Purpose    : Finding primes from 1 to 255
#
# ###########################################################################
#
Start		LIA		X'01				# Load 1
			STA		NUMBER				#   Into NUMBER
#
#										# Loop NUMBER = 1 to 255
#
Nloop		LIA		X'01				# Assume this one 
			STA		PRIME				#   is a prime
#
			LMB		NUMBER				# Track NUMBER in B register
#
			LIA		X'02				# Load 2
			STA		COUNT				#   Into Count
#						
#										# Loop COUNT = 2 to NUMBER
#
Cloop		LMC		COUNT				# Track COUNT in C register
#
			LMA		NUMBER				# CALC = 
			SBM		COUNT				#   NUMBER -
			STA		CALC				#     COUNT
#
			JC		AtEnd				# CALC < 0 ? : AtEnd
			JZ		AtEnd				# CALC = 0 ? : AtEnd
#
Subtr		LMA		CALC				# CALC = 
			SBM		COUNT				#   CALC - 
			STA		CALC				#     COUNT
#
			JC		AtEnd				# CALC < 0 ? : AtEnd
			JZ		AtEnd				# CALC = 0 ? : AtEnd
			JMP		Subtr               #   Else keep Subtracting
#
AtEnd		LMA		CALC				# CALC 
			CPI		X'00				#   Equal Zero?
			JE		SKIP				#      Go SKIP
			JMP		NEXTC				#      Else NEXTC
#
SKIP		LMA		NUMBER				# NUMBER
			CPM		COUNT				#   Equal COUNT?
			JE		NEXTC				#     Go NEXTC
#
			LIA		X'00				# Set PRIME indicoator
			STA		PRIME				#   To false
			JMP		SKIP1				#     Leave COUNT loop
#	
NEXTC		LMA 	COUNT				# COUNT =
			ADI		X'01				#   COUNT + 
			STA		COUNT				#     1
#
			CPM		NUMBER				# COUNT > NUMBER ?
			JG		SKIP1				#   Go SKIP1
			JMP		Cloop				#   Else Go Cloop
#
SKIP1		LMA		PRIME				# Prime indicator
			CPI		X'00				#   false ?
			JE		NEXTN				#     Go NEXTN
#
FoundPR		LMA		NUMBER				# Found Prime
			OPA							#   Put on Output
#
NEXTN		LMA		NUMBER				# Increment
			ADI		X'01				#   NUMBER
			STA		NUMBER				#     by 1
			CPI		X'0FFF				# Less than 4095 ?
			JL		NLOOP				#   Go next number
#	
FINISH		HLT							# Halt program
#
# ###########################################################################
# ### Storage area (reserve two bytes per number)
# ###########################################################################
NUMBER		NOP
			NOP
COUNT		NOP
			NOP
CALC		NOP
			NOP
PRIME		NOP
			NOP
#
